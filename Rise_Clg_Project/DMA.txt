



DYNAMIC MEMORY ALLOCATIONS:




1.Malloc() :

p=(int*)malloc(n*sizeof(*p));//---->This approach automatically adjusts to the type of p and avoids errors if the t
ype of p changes in the future.


// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
int main() {
    int n,*p;
    printf("Enter size: ");
    scanf("%d",&n);
    p=(int*)malloc(n*sizeof(int));
    // p=malloc(n*sizeof(int));   ---->[c compiler converting implictly to void type to other pointer type but not in c++] 
    
    if(p==NULL)
    {
        printf("Memory allocation failed");
    }
    
    for(int i=0;i<n;i++)
    {
        scanf("%d",(p+i));
    }
    for(int i=0;i<n;i++)
    {
        printf("%d ",*(p+i));
    }

    return 0;
}






2.Calloc() :







2.
// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
int main() {
    int n,*p;
    printf("Enter size: ");
    scanf("%d",&n);
    p=(int*)calloc(n,sizeof(int));
    
    if(p==NULL)
    {
        printf("Memory allocation failed");
    }
    
    for(int i=0;i<n;i++)
    {
        scanf("%d",(p+i));
    }
    for(int i=0;i<n;i++)
    {
        printf("%d ",*(p+i));
    }

    return 0;
}










Realloc():






3.
#include <stdio.h>
#include<stdlib.h>
int main() {
    int n,*p;
    printf("Enter size: ");
    scanf("%d",&n);
    p=(int*)malloc(n*sizeof(*p));
    
    if(p==NULL)
    {
        printf("Memory allocation failed");
    }
    
    for(int i=0;i<n;i++)
    {
        scanf("%d",(p+i));
    }
    printf("\nDo you want re-size your array then 1 orther wise 0: ");
    int opt;
    int n2;
    scanf("%d",&opt);
    switch(opt){
       case 1:  printf("Enter new size: ");
                scanf("%d",&n2);
            int *p1=(int*)realloc(p,n2*sizeof(*p1));
            for(int i=n;i<n2;i++)
            {
              scanf("%d",(p1+i));
             }
             for(int i=0;i<n2;i++)
             {
               printf("%d ",*(p1+i));
             }
             break;
    case 0:
        
        for(int i=0;i<n;i++)
       {
        printf("%d ",*(p+i));
       }  
       break;
    default:printf("Invalid input");
        
    }

    return 0;
}













3.1[Note:No need to create another pointer so you can update same address to existing pointer]
#include <stdio.h>
#include<stdlib.h>
int main() {
    int n,*p;
    printf("Enter size: ");
    scanf("%d",&n);
    p=(int*)malloc(n*sizeof(*p));
    
    if(p==NULL)
    {
        printf("Memory allocation failed");
    }
    
    for(int i=0;i<n;i++)
    {
        scanf("%d",(p+i));
    }
    printf("\nDo you want re-size your array then 1 orther wise 0: ");
    int opt;
    int n2;
    scanf("%d",&opt);
    switch(opt){
       case 1:  printf("Enter new size: ");
                scanf("%d",&n2);
             p=(int*)realloc(p,n2*sizeof(*p));
            for(int i=n;i<n2;i++)
            {
              scanf("%d",(p+i));
             }
             for(int i=0;i<n2;i++)
             {
               printf("%d ",*(p+i));
             }
             break;
    case 0:
        
        for(int i=0;i<n;i++)
       {
        printf("%d ",*(p+i));
       }  
       break;
    default:printf("Invalid input");
        
    }

    return 0;
}





4.Free():




4.
#include <stdio.h>
#include<stdlib.h>
int main() {
    int n,*p;
    printf("Enter size: ");
    scanf("%d",&n);
    p=(int*)malloc(n*sizeof(*p));
    
    if(p==NULL)
    {
        printf("Memory allocation failed");
    }
    
    for(int i=0;i<n;i++)
    {
        scanf("%d",(p+i));
    }
    
        for(int i=0;i<n;i++)
       {
        printf("%d ",*(p+i));
       } 
       free(p);


       for(int i=0;i<n;i++)
       {                     ----------------->[Here pointer will hold nothing because p had been freed the holded adderss]
        printf("%d ",*(p+i));
       }  
       
       //free(p);
       

    return 0;
}
