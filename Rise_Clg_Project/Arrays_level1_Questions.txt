1.
Problem Statement:
Given an array and two positions, do swap those elements at those two positions. If the position mention exceeds index limit, then print "Invalid".


Input Format:
Accept the integers as input in the following order:
Array_size
Array_Elements
Position_1 Position_2


Output Format:
Print the updated array or "Invalid" as output.


Constraints:
1<=size<=10^9
1<=array[size]<=10^15


Sample Input 1:
6
2 4 56 3 6 8
0 32


Sample Output 1:
Invalid


Sample Input 2:
5
1 2 3 4 5
2 4


Sample Output 2:
1 2 5 4 3




2.
Problem Statement:
Write a program to complete the function replace_ele() , which receives number of elements and array ,  do replace every element in the array with the sum of  every other element and return the same array. Note:Dont use extra arrays


Input Format:
No need read input, as it is predefined.


Output Format:
No need to print as it is predefined.


Constraints:
1<=size<=10^9
1<=arr[size]<=10^15


Sample Input 1:
7
1 2 3 4 5 6 7


Sample Output 1:
27 26 25 24 23 22 21


Sample Input 2:
5
1 2 3 4 5


Sample Output 2:
14 13 12 11 10



3.
Problem Statement:
Write a program to complete the function sum_of_right_side_ele(), which receives number of elements and array ,  do replace every element in the array with the sum of  its right side elements and return the same array. Note:Dont use extra arrays


Input Format:
No need read input, as it is predefined.


Output Format:
No need to print as it is predefined.


Constraints:
1<=size<=10^9
1<=arr[size]<=10^15


Sample Input 1:
5
11 22 33 44 55


Sample Output 1:
154 132 99 55 0


Sample Input 2:
10
10 20 30 40 50 60 70 80 90 100


Sample Output 2:
540 520 490 450 400 340 270 190 100 0





4.
Write a program to complete the function sum_of_left_side_ele(), which receives number of elements and array ,  do replace every element in the array with the sum of  its left side elements and return the same array. Note:Dont use extra arrays


Input Format:
No need read input, as it is predefined.


Output Format:
No need to print as it is predefined.


Constraints:
1<=size<=10^9
1<=arr[size]<=10^15


Sample Input 1:
5
1 2 3 4 5


Sample Output 1:
0 1 3 6 10


Sample Input 2:
10
1 2 3 4 5 6 7 8 9 10


Sample Output 2:
0 1 3 6 10 15 21 28 36 45








5.
Problem Statement:
Given the size of array and array values to function Array_multiplication() , do complete the function by replacing every element by the product of previous and next element for all index.


Input Format:
No need read input, as it is predefined.


Output Format:
No need to print as it is predefined.


Constraints:
1<=size<=10^9
1<=arr[size]<=10^15


Sample Input 1:
10
1 2 3 4 5 6 7 8 9 10


Sample Output 1:
2 3 8 15 24 35 48 63 80 90


Sample Input 2:
5
1 2 3 4 5


Sample Output 2:
2 3 8 15 20









6.
Problem Statement:
Given the size of array and array values to function arr_reverse(), write a code to reverse the given array.


Input Format:
No need to read anything, as it is predefined.


Output Format:
No need to print anything, as it is predefined.


Constraints:
1<=size<=10^9
1<=arr[ind]<=10^15


Sample Input 1:
10
2 4 6 85 68 2 7 -3 0 15


Sample Output 1:
15 0 -3 7 2 68 85 6 4 2


Sample Input 2:
5
1 2 3 4 5


Sample Output 2:
5 4 3 2 1









8.
Problem Statement:
Write a program to an array and element to be inserted and position in which
the new element to be inserted from the user. Insert the element at given insert position and display the
updated array.


Input Format:
Accept the integers as input in the following order:
Array_size
Array_Elements
New Element
Position


Output Format:
Print the updated array as output.


Constraints:
1<=size<=10^9
1<=arr[size]<=10^15


Sample Input 1:
7
2 3 4 5 6 7 8
1
7


Sample Output 1:
2 3 4 5 6 7 1 8


Sample Input 2:
10
1 2 3 4 5 6 7 8 9 10
5
2


Sample Output 2:
1 5 2 3 4 5 6 7 8 9 10







9.
Problem Statement:
Write a program to read number of elements,array and position of element to be deleted.
 Delete the element at the given position or print "deletion not possible" if given position is out of Bound.


Input Format:
Accept the integers as input in the following order:
Array_size
Array_Elements
Position


Output Format:
Print the updated array or "Deletion not possible." as output


Constraints:
1<=size<=10^9
1<=arr[size]<=10^15


Sample Input 1:
5
1 2 3 4 5
6


Sample Output 1:
Deletion not possible


Sample Input 2:
5
1 2 3 4 5
4


Sample Output 2:
1 2 3 5






10.
Write a C program to Find common elements from 3 sorted array


Input Format:
Accept the integers as input in the following order:
Three space separated integer values(3 array size)
first array elements
second array elements
third array elements


Output Format:
Print the common elements from 3 sorted array, Similar to the sample input.


Constraints:
1<=size<=10^9
1<=arr[ind]<=10^15


Sample Input 1:
5 2 3
1 2 3 4 5
1 3
1 2 3


Sample Output 1:
1 3


Sample Input 2:
6 3 4
1 3 4 5 6 7
1 2 5
1 3 5 7


Sample Output 2:
1 5









11.
Problem Statement:
Write a program to accept the array from the user and
display all the unique elements in the array, if no unique elements in present then print "No unique elements in the array".


Input Format:
Accept the integer from the user in the following order.
First line of the input contains the size of the array.
Second line contains the Array elements.


Output Format:
Print the unique elements(Integers) From the array or Display"No unique elements in the array", Similar to the Sample input.


Constraints:
1<=size<=10^9
1<=arr[ind]<=10^15


Sample Input 1:
8
4 3 4 3 2 5 2 5


Sample Output 1:
No unique elements in the array


Sample Input 2:
10
1 2 2 3 3 4 4 5 5 10


Sample Output 2:
1 10